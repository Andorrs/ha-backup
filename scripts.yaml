probe_1_set_temp:
  alias: Probe 1 set temp
  fields:
    value:
      description: Temperatur
      example: '35'
  sequence:
  - service: input_number.set_value
    data:
      value: '{{ value }}'
    target:
      entity_id: input_number.igrill_probe_1_target
  mode: single
probe_2_set_temp:
  alias: Probe 2 set temp
  fields:
    value:
      description: Temperatur
      example: '35'
  sequence:
  - service: input_number.set_value
    data:
      value: '{{ value }}'
    target:
      entity_id: input_number.igrill_probe_2_target
  mode: single
igrill_probe_1_predict_remaining_time:
  alias: iGrill Probe 1 Predict Remaining Time
  fields:
    last_temp:
      description: Temp vid förra triggern
      example: '48'
    temp_now:
      description: Temp nu
      example: '49'
  variables:
    last_update: '{{ as_timestamp(states(''input_datetime.igrill_probe_1_last_update''))
      }}'
    right_now: '{{ as_timestamp(now()) }}'
    target_temp: '{{ states(''input_number.igrill_probe_1_target'') | int }}'
    seconds_remaining: '{{ (target_temp - temp_now) * (right_now - last_update) /
      (temp_now - last_temp) }}'
    ready_time: '{{ right_now + seconds_remaining }}'
    midnight: '{{ now().replace(hour=0, minute=0, second=0, microsecond=0) }}'
    time_remaining: '{{ as_timestamp(now().replace(hour=0, minute=0, second=0, microsecond=0))
      + seconds_remaining }}'
  sequence:
  - service: input_datetime.set_datetime
    entity_id: input_datetime.igrill_probe_1_estimated_time_remaining
    data:
      datetime: '{{ as_local(as_datetime(time_remaining)) }}'
  - service: input_datetime.set_datetime
    entity_id: input_datetime.igrill_probe_1_estimated_ready_time
    data:
      datetime: '{{ as_local(as_datetime(ready_time)) }}'
  - service: input_datetime.set_datetime
    entity_id: input_datetime.igrill_probe_1_last_update
    data:
      datetime: '{{ as_local(as_datetime(right_now)) }}'
  mode: single
igrill_probe_2_predict_remaining_time:
  alias: iGrill Probe 2 Predict Remaining Time
  fields:
    last_temp:
      description: Temp vid förra triggern
      example: '48'
    temp_now:
      description: Temp nu
      example: '49'
  variables:
    last_update: '{{ as_timestamp(states(''input_datetime.igrill_probe_2_last_update''))
      }}'
    right_now: '{{ as_timestamp(now()) }}'
    target_temp: '{{ states(''input_number.igrill_probe_2_target'') | int }}'
    seconds_remaining: '{{ (target_temp - temp_now) * (right_now - last_update) /
      (temp_now - last_temp) }}'
    ready_time: '{{ right_now + seconds_remaining }}'
    midnight: '{{ now().replace(hour=0, minute=0, second=0, microsecond=0) }}'
    time_remaining: '{{ as_timestamp(now().replace(hour=0, minute=0, second=0, microsecond=0))
      + seconds_remaining }}'
  sequence:
  - service: input_datetime.set_datetime
    entity_id: input_datetime.igrill_probe_2_estimated_time_remaining
    data:
      datetime: '{{ as_local(as_datetime(time_remaining)) }}'
  - service: input_datetime.set_datetime
    entity_id: input_datetime.igrill_probe_2_estimated_ready_time
    data:
      datetime: '{{ as_local(as_datetime(ready_time)) }}'
  - service: input_datetime.set_datetime
    entity_id: input_datetime.igrill_probe_2_last_update
    data:
      datetime: '{{ as_local(as_datetime(right_now)) }}'
  mode: single
igrill_probe_1_predict_remaining_time_test:
  alias: iGrill Probe 1 Predict Remaining Time Test
  fields:
    last_temp:
      description: Temp vid förra triggern
      example: '48'
    temp_now:
      description: Temp nu
      example: '49'
  variables:
    last_update: '{{ as_timestamp(states(''input_datetime.igrill_probe_1_last_update''))
      }}'
    right_now: '{{ as_timestamp(now()) }}'
    target_temp: '{{ states(''input_number.igrill_probe_1_target'') | int }}'
    seconds_remaining: '{{ (target_temp - temp_now) * (right_now - last_update) /
      (temp_now - last_temp) }}'
  sequence:
  - service: logbook.log
    data:
      name: 'last_temp: '
      message: '{{ last_temp }}'
  - service: logbook.log
    data:
      name: 'temp_now: '
      message: '{{ temp_now }}'
  - service: logbook.log
    data:
      name: 'seconds_remaining: '
      message: '{{ seconds_remaining }}'
  mode: single
send_notification_to_phone:
  alias: Send notification to phone
  sequence:
  - device_id: ef52a483bbf741a868fe93580a976531
    domain: mobile_app
    type: notify
    message: '{{message}}'
    title: '{{title}}'
  description: ''
  fields:
    title:
      selector:
        text:
      name: title
      description: Title for the message
      required: false
    message:
      selector:
        text:
      name: message
      description: Description of the message
      required: true
calculate_days_of_year:
  alias: Calculate days of year
  variables:
    days_of_year: "{% set iYear = now().year %}\n{% if (iYear % 4 == 0 and iYear %
      100 != 0) or (iYear % 400 == 0) %}\n  {% set days = 366 %}\n{% else %}\n  {%
      set days = 365 %}\n{% endif %}\n{{ {'value': days} }}\n"
  sequence:
  - stop: End
    response_variable: days_of_year
  description: ''
calculate_lowest_electricity_price:
  alias: Calculate lowest electricity price
  variables:
    lowest_electricity_price: "{% set ns = namespace(min=600.0, day='', time='', min_next_evening=700.0)
      %}\n{% for i in [18,19,20,21,22,23] %}\n  {% set val = state_attr('sensor.nordpool_kwh_se4_sek_2_10_0',
      'today')[i] %}\n  {% if val < ns.min %}\n    {% set ns.min = val %}\n    {%
      set ns.day = 'idag' %}\n    {% set ns.time = state_attr('sensor.nordpool_kwh_se4_sek_2_10_0',
      'raw_today')[i].start %}\n  {% endif %}\n{% endfor %}\n{% for i in [0,1,2,3,4,5,6]
      %}\n  {% set val = state_attr('sensor.nordpool_kwh_se4_sek_2_10_0', 'tomorrow')[i]
      %}\n  {% if val < ns.min %}\n    {% set ns.min = val %}\n    {% set ns.day =
      'imorgon' %}\n    {% set ns.time = state_attr('sensor.nordpool_kwh_se4_sek_2_10_0',
      'raw_tomorrow')[i].start %}\n  {% endif %}\n{% endfor %}\n{% for i in [18,19,20,21,22,23]
      %}\n  {% set val = state_attr('sensor.nordpool_kwh_se4_sek_2_10_0', 'tomorrow')[i]
      %}\n  {% if val < ns.min_next_evening %}\n    {% set ns.min_next_evening = val
      %}\n  {% endif %}\n{% endfor %}\n{{ {'value': ns.min, 'day': ns.day, 'time':
      ns.time.strftime(\"%H:%M\"), 'min_next': ns.min_next_evening} }}\n"
  sequence:
  - stop: End
    response_variable: lowest_electricity_price
  description: ''
