# Loads default set of integrations. Do not remove.
default_config:

# Load frontend themes from the themes folder
frontend:
  themes: !include_dir_merge_named themes

# Text to speech
tts:
  - platform: google_translate
    language: "sv"

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

# Added sensors
sensor:
  - platform: rest
    resource: https://karnkraft.vattenfall.se/ringhals/produktion/
    method: GET
    scan_interval: 1800
    name: Ringhals Power
    value_template: >
      {{ value | regex_findall_index("blockProductionDataList.*production.:(\d+.\d+).*percent.:(\d+.\d+).*production.:(\d+.\d+).*percent.:(\d+.\d+)", ignorecase=true) }}
  - platform: template
    sensors:
      ringhals3_effekt:
        friendly_name: Ringhals 3 Effekt
        unit_of_measurement: MW
        value_template: >
          {{ states('sensor.ringhals_power').split(',')[0] | regex_findall_index("(\d+)") }}
      ringhals3_procent:
        friendly_name: Ringhals 3 Procent
        unit_of_measurement: "%"
        value_template: >
          {{ states('sensor.ringhals_power').split(',')[1] | regex_findall_index("(\d+.\d+)") }}
      ringhals4_effekt:
        friendly_name: Ringhals 4 Effekt
        unit_of_measurement: MW
        value_template: >
          {{ states('sensor.ringhals_power').split(',')[2] | regex_findall_index("(\d+)") }}
      ringhals4_procent:
        friendly_name: Ringhals 4 Procent
        unit_of_measurement: "%"
        value_template: >
          {{ states('sensor.ringhals_power').split(',')[3] | regex_findall_index("(\d+.\d+)") }}
  - platform: rest
    resource: https://karnkraft.vattenfall.se/forsmark/produktion/
    method: GET
    scan_interval: 1800
    name: Forsmark Power
    value_template: >
      {{ value | regex_findall_index("blockProductionDataList.*production.:(\d+.\d+).*percent.:(\d+.\d+).*production.:(\d+.\d+).*percent.:(\d+.\d+).*production.:(\d+.\d+).*percent.:(\d+.\d+)", ignorecase=true) }}
  - platform: template
    sensors:
      forsmark1_effekt:
        friendly_name: Forsmark 1 Effekt
        unit_of_measurement: MW
        value_template: >
          {{ states('sensor.forsmark_power').split(',')[0] | regex_findall_index("(\d+.\d)") | round(0) }}
      forsmark1_procent:
        friendly_name: Forsmark 1 Procent
        unit_of_measurement: "%"
        value_template: >
          {{ states('sensor.forsmark_power').split(',')[1] | regex_findall_index("(\d+.\d+)") }}
      forsmark2_effekt:
        friendly_name: Forsmark 2 Effekt
        unit_of_measurement: MW
        value_template: >
          {{ states('sensor.forsmark_power').split(',')[2] | regex_findall_index("(\d+.\d)") | round(0) }}
      forsmark2_procent:
        friendly_name: Forsmark 2 Procent
        unit_of_measurement: "%"
        value_template: >
          {{ states('sensor.forsmark_power').split(',')[3] | regex_findall_index("(\d+.\d+)") }}
      forsmark3_effekt:
        friendly_name: Forsmark 3 Effekt
        unit_of_measurement: MW
        value_template: >
          {{ states('sensor.forsmark_power').split(',')[4] | regex_findall_index("(\d+.\d)") | round(0) }}
      forsmark3_procent:
        friendly_name: Forsmark 3 Procent
        unit_of_measurement: "%"
        value_template: >
          {{ states('sensor.forsmark_power').split(',')[5] | regex_findall_index("(\d+.\d+)") }}
  - platform: rest
    resource: https://www.okg.se/.netlify/functions/getReactorOutput
    name: OKG Effekt
    scan_interval: 1800
    value_template: "{{ value_json.output }}"
    unit_of_measurement: MW
  - platform: template
    sensors:
      okg_procent:
        friendly_name: OKG Procent
        value_template: "{{ (states('sensor.okg_effekt')|int) / 1450 * 100 }}"
        unit_of_measurement: "%"
      #time_until_jack:
      #  friendly_name: När ska vi till Ästad?
      #  value_template: >
      #    {% set days_until_jack = (as_timestamp("2023-7-8 14:30:00") - as_timestamp(now())) | timestamp_custom("%j")| int %}
      #    {% set hours_until_jack = (as_timestamp("2023-7-8 14:30:00") - as_timestamp(now())) | timestamp_custom("%H")| int %}
      #    {% set minutes_until_jack = (as_timestamp("2023-7-8 14:30:00") - as_timestamp(now())) | timestamp_custom("%M")| int %}
      #    Om {{ days_until_jack - 1 }} dagar, {{ hours_until_jack }} timmar, {{ minutes_until_jack }} minuter
      wallconnector_power:
        friendly_name: Wall Connector Power
        unit_of_measurement: "W"
        device_class: "power"
        value_template: >
          {% set a_current = states('sensor.tesla_wall_connector_phase_a_current') | float %}
          {% set b_current = states('sensor.tesla_wall_connector_phase_b_current') | float %}
          {% set c_current = states('sensor.tesla_wall_connector_phase_c_current') | float %}
          {% set a_voltage = states('sensor.tesla_wall_connector_phase_a_voltage') | float %}
          {% set b_voltage = states('sensor.tesla_wall_connector_phase_b_voltage') | float %}
          {% set c_voltage = states('sensor.tesla_wall_connector_phase_c_voltage') | float %}
          {{ (a_current * a_voltage) + (b_current * b_voltage) + (c_current * c_voltage) }}
      totalt_elpris:
        friendly_name: Totalt elpris
        unit_of_measurement: "SEK/kWh"
        icon_template: "mdi:currency-eur"
        value_template: >
          {% set days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] %}
          {% set monthly_usage = [2218, 2007, 1662, 1662, 1294, 1172, 1314, 942, 1096, 1591, 1966, 2102] %}
          {% set i = now().month - 1 %}
          {% set spotpris = states('sensor.nordpool_kwh_se4_sek_2_10_0') | float %}
          {% set days_in_year = states('input_number.days_in_year') | float %}
          {% set elbolag_avgifter = 18.10 * 0.8 | float %}
          {% set elbolag_arsavgift = 58800 %}
          {% set elbolag_fast_avgift = (elbolag_arsavgift * 0.8 / days_in_year * days_in_month[i] / monthly_usage[i]) | float %}
          {% set elnat_arsavgift = 684400 | int %}
          {% set elnat_fast_avgift = (elnat_arsavgift / days_in_year * days_in_month[i] / monthly_usage[i]) | float %}
          {% set elnat_overforing = 17.36 | float %}
          {% set elnat_energiskatt = 42.80 | float %}
          {{ ((spotpris + elbolag_fast_avgift + elbolag_avgifter + elnat_fast_avgift + elnat_overforing + elnat_energiskatt) * 1.25 / 100) | round(2) }}
      totalt_elpris_se3:
        friendly_name: Totalt elpris SE3
        unit_of_measurement: "SEK/kWh"
        icon_template: "mdi:currency-eur"
        value_template: >
          {% set days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] %}
          {% set monthly_usage = [2218, 2007, 1662, 1662, 1294, 1172, 1314, 942, 1096, 1591, 1966, 2102] %}
          {% set i = now().month - 1 %}
          {% set spotpris = states('sensor.nordpool_kwh_se3_sek_2_10_0') | float %}
          {% set days_in_year = states('input_number.days_in_year') | float %}
          {% set elbolag_avgifter = 18.10 * 0.8 | float %}
          {% set elbolag_manadsavgift = 6900 %}
          {% set elbolag_fast_avgift = (elbolag_manadsavgift * 0.8 / days_in_month[i] / monthly_usage[i]) | float %}
          {% set elnat_arsavgift = 491600 | int %}
          {% set elnat_fast_avgift = (elnat_arsavgift / days_in_year * days_in_month[i] / monthly_usage[i]) | float %}
          {% set elnat_overforing = 27.20 | float %}
          {% set elnat_energiskatt = 42.80 | float %}
          {{ ((spotpris + elbolag_fast_avgift + elbolag_avgifter + elnat_fast_avgift + elnat_overforing + elnat_energiskatt) * 1.25 / 100) | round(2) }}
      wallconnector_power_cost:
        friendly_name: "Wallconnector kostnad momentan"
        unit_of_measurement: "SEK"
        icon_template: "mdi:currency-eur"
        value_template: >
          {% set power = states('sensor.wallconnector_power') | float %}
          {% set cost = states('sensor.totalt_elpris') | float %}
          {{ power * cost / 1000 }}
      wallconnector_power_alex_o_elin:
        friendly_name: "Wallconnector power Alex o Elin"
        unit_of_measurement: "W"
        device_class: "power"
        value_template: >
          {% if is_state('input_select.car_connected_to_charger', 'Sälen') %}
          {{ states('sensor.wallconnector_power') }}
          {% else %}
          {{ 0.0 }}
          {% endif %}
      wallconnector_power_lennart_o_suzanne:
        friendly_name: "Wallconnector power Lennart o Suzanne"
        unit_of_measurement: "W"
        device_class: "power"
        value_template: >
          {% if is_state('input_select.car_connected_to_charger', 'Lennart') %}
          {{ states('sensor.wallconnector_power') }}
          {% else %}
          {{ 0.0 }}
          {% endif %}
      wallconnector_power_cost_alex_o_elin:
        friendly_name: "Wallconnector kostnad momentan Alex o Elin"
        unit_of_measurement: "SEK"
        icon_template: "mdi:currency-eur"
        value_template: >
          {% set power = states('sensor.wallconnector_power') | float %}
          {% set cost = states('sensor.totalt_elpris') | float %}
          {% if is_state('input_select.car_connected_to_charger', 'Sälen') %}
          {{ power * cost / 1000 }}
          {% else %}
          {{ 0.0 }}
          {% endif %}
      wallconnector_power_cost_lennart_o_suzanne:
        friendly_name: "Wallconnector kostnad momentan Lennart o Suzanne"
        unit_of_measurement: "SEK"
        icon_template: "mdi:currency-eur"
        value_template: >
          {% set power = states('sensor.wallconnector_power') | float %}
          {% set cost = states('sensor.totalt_elpris') | float %}
          {% if is_state('input_select.car_connected_to_charger', 'Lennart') %}
          {{ power * cost / 1000 }}
          {% else %}
          {{ 0.0 }}
          {% endif %}
      ellie_power_at_herrgarden:
        friendly_name: "Ellie power at Herrgården"
        unit_of_measurement: "W"
        value_template: >
          {% if is_state('device_tracker.ellie_location_tracker', 'lilla_herrgarden') %}
          {{ states('sensor.ellie_charger_power') | float * 1000 }}
          {% else %}
          {{ 0.0 }}
          {% endif %}
      ellie_power_cost_at_herrgarden:
        friendly_name: "Ellie power cost at Herrgården"
        unit_of_measurement: "SEK"
        icon_template: "mdi:currency-eur"
        value_template: >
          {% set power = states('sensor.ellie_power_at_herrgarden') | float %}
          {% set cost = states('sensor.totalt_elpris_se3') | float %}
          {% if is_state('device_tracker.ellie_location_tracker', 'lilla_herrgarden') %}
          {{ power * cost / 1000 }}
          {% else %}
          {{ 0.0 }}
          {% endif %}
      ellie_power_at_blavinge:
        friendly_name: "Ellie power at Blåvinge"
        unit_of_measurement: "W"
        value_template: >
          {% if is_state('device_tracker.ellie_location_tracker', 'home') %}
          {{ states('sensor.ellie_charger_power') | float * 1000 }}
          {% else %}
          {{ 0.0 }}
          {% endif %}
      ellie_power_cost_at_blavinge:
        friendly_name: "Ellie power cost at Blåvinge"
        unit_of_measurement: "SEK"
        icon_template: "mdi:currency-eur"
        value_template: >
          {% set power = states('sensor.ellie_power_at_blavinge') | float %}
          {% set cost = states('sensor.totalt_elpris') | float %}
          {% if is_state('device_tracker.ellie_location_tracker', 'home') %}
          {{ power * cost / 1000 }}
          {% else %}
          {{ 0.0 }}
          {% endif %}
      outdoor_latest_real_temperature:
        friendly_name: "Senaste riktiga yttertemperaturen"
        unit_of_measurement: "°C"
        value_template: >
          {% if states('sensor.tesla_wall_connector_handle_temperature') | float() < 40.0 %}
          {{ states('sensor.tesla_wall_connector_handle_temperature') }}
          {% endif %}
      outdoor_temperature:
        friendly_name: "Yttertemperatur"
        unit_of_measurement: "°C"
        value_template: >
          {% if states('sensor.tesla_wall_connector_handle_temperature') | float() < 40.0 %}
          {{ states('sensor.tesla_wall_connector_handle_temperature') }}
          {% else %}
          {{ states('sensor.outdoor_latest_temperature') }}
          {% endif %}

########### iGRILL ALERT SENSORS ############
template:
  - sensor:
      - name: "igrill_alert_temp"
        state: >-
          {% if (states.sensor.igrill_70918f1acee4_probe_4.state | int) < (states.input_number.igrill_alert_low.state | int) or (states.sensor.igrill_70918f1acee4_probe_4.state | int)  > (states.input_number.igrill_alert_high.state | int) %}
            Alert
          {% else %}
            Normal
          {% endif %}
  - sensor:
      - name: "target_alert_temp_probe_1"
        state: >-
          {% if (states.sensor.igrill_70918f1acee4_probe_1.state | int) >= (states.input_number.igrill_probe_1_target.state | int) %}
            Alert
          {% else %}
            Normal
          {% endif %}
  - sensor:
      - name: "target_alert_temp_probe_2"
        state: >-
          {% if (states.sensor.igrill_70918f1acee4_probe_2.state | int) >= (states.input_number.igrill_probe_2_target.state | int) %}
            Alert
          {% else %}
            Normal
          {% endif %}
  - sensor:
      - name: "target_alert_temp_probe_3"
        state: >-
          {% if (states.sensor.igrill_70918f1acee4_probe_3.state | int) >= (states.input_number.igrill_probe_3_target.state | int) %}
            Alert
          {% else %}
            Normal
          {% endif %}
  - sensor:
      - name: "target_alert_temp_probe_4"
        state: >-
          {% if (states.sensor.igrill_70918f1acee4_probe_4.state | int) >= (states.input_number.igrill_probe_4_target.state | int) %}
            Alert
          {% else %}
            Normal
          {% endif %}
  - sensor:
      - name: "almost_target_alert_temp_probe_1"
        state: >-
          {% if (states.sensor.igrill_70918f1acee4_probe_1.state | int) >= (((states.input_number.igrill_probe_1_target.state | int) - 5) | int) %}
            Alert
          {% else %}
            Normal
          {% endif %}
  - sensor:
      - name: "almost_target_alert_temp_probe_2"
        state: >-
          {% if (states.sensor.igrill_70918f1acee4_probe_2.state | int) >= (((states.input_number.igrill_probe_2_target.state | int) - 5) | int) %}
            Alert
          {% else %}
            Normal
          {% endif %}
  - sensor:
      - name: "almost_target_alert_temp_probe_3"
        state: >-
          {% if (states.sensor.igrill_70918f1acee4_probe_3.state | int) >= (((states.input_number.igrill_probe_3_target.state | int) - 5) | int) %}
            Alert
          {% else %}
            Normal
          {% endif %}
  - sensor:
      - name: "almost_target_alert_temp_probe_4"
        state: >-
          {% if (states.sensor.igrill_70918f1acee4_probe_4.state | int) >= (((states.input_number.igrill_probe_4_target.state | int) - 5) | int) %}
            Alert
          {% else %}
            Normal
          {% endif %}

rest:
  - resource: https://www.smhi.se/wpt-a/backend_observation/metobs/station/number/52350
    scan_interval: 3600
    sensor:
      - name: "SMHI Observation Malmö Temp"
        unit_of_measurement: "°C"
        value_template: '{{ value_json["values"]["t"]["values"][24].value | float }}'
      - name: "SMHI Observation Malmö Vind"
        unit_of_measurement: "m/s"
        value_template: '{{ value_json["values"]["ws"]["values"][24].value | float }}'
      - name: "SMHI Observation Malmö Byvind"
        unit_of_measurement: "mm"
        value_template: '{{ value_json["values"]["gust"]["values"][24].value | float }}'
      - name: "SMHI Observation Malmö Nederbörd"
        unit_of_measurement: "mm"
        value_template: '{{ value_json["values"]["p"]["values"][24].value | float }}'
      - name: "SMHI Observation Malmö Luftfuktighet"
        unit_of_measurement: "%"
        value_template: '{{ value_json["values"]["r"]["values"][24].value | float }}'

mqtt:
  sensor:
    state_topic: "homeassistant/sensor/igrill_70918f1acee4/status"
    name: "ESP32 iGrill BLE Client"
    json_attributes_topic: "homeassistant/sensor/igrill_70918f1acee4/systeminfo"

logbook:
  exclude:
    entities: sensor.time_until_jack

logger:
  default: info
  logs:
    homeassistant.components.rest: debug

####### To automate upload to Github ######
shell_command:
  pushupdates_to_github: /bin/bash pushupdates.sh

http:
  use_x_forwarded_for: true
  trusted_proxies:
    - 172.30.33.0/24
    - 172.16.0.0/12
